import { GoTimeUnit } from './enums/gotime_unts';
export declare class GoTime {
    constructor(definition: string);
    test(date: Date | null | undefined): boolean;
    private limits;
    private definition;
    private _unit;
    get unit(): GoTimeUnit;
    toString(): string;
    protected computeUnit(): GoTimeUnit;
    /**
     * Returns the next time this Go-Time will be active, or null if no active time is found.  The search is a brute force minute by minute check, so don't pass in large time spans
     * @param {Date} from Optional date to start checking from, or now in UTC
     * @param {Date} to Optional date to give up the search, or a week from now
     * @param {GoTimeUnit} unit Optional unit to step by through time.  Will default to largest step viable based on definition.  Also see `step`
     * @param {number} step Optional step or stride to sample the from-to range.  Make sure this won't skip over a potential active time based on your Go-Time definition.
     */
    next(from?: Date, to?: Date, unit?: GoTimeUnit | null, step?: number): Date | null;
    private static readonly defParse;
    private parse;
    private parsePart;
    private parseOperator;
}
