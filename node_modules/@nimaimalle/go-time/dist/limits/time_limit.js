"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLimit = void 0;
const gotime_parts_1 = require("../enums/gotime_parts");
const gotime_unts_1 = require("../enums/gotime_unts");
const _limit_1 = require("./_limit");
class TimeLimit extends _limit_1.GoTimeLimit {
    constructor() {
        super(...arguments);
        this.part = gotime_parts_1.GoTimePart.time;
    }
    getCurrentValue(date) {
        return date.getHours() * 60 + date.getMinutes();
    }
    toNumber(n) {
        const hoursMinutes = n.split(':');
        const hours = parseInt(hoursMinutes[0].trim());
        const minutes = parseInt(hoursMinutes[1].trim());
        if (isNaN(hours) || isNaN(minutes))
            throw new Error(`Unable to parse time "${n}"`);
        if (hours < 0 || hours > 24)
            throw new Error(`Invalid hours in time "${n}"`);
        if (minutes < 0 || minutes > 60)
            throw new Error(`Invalid minutes in time "${n}"`);
        return hours * 60 + minutes;
    }
    computeUnit() {
        for (const span of this.values) {
            if (span.end !== undefined) {
                const diff = span.end - span.value;
                if (diff < 60) {
                    return gotime_unts_1.GoTimeUnit.minute;
                }
            }
            else if (span.value < 60) {
                return gotime_unts_1.GoTimeUnit.minute;
            }
        }
        return gotime_unts_1.GoTimeUnit.hour;
    }
}
exports.TimeLimit = TimeLimit;
