export interface ILootTableEntry<T extends string = string, V extends number | string = number, L extends Array<unknown> = LootTable<T>> {
    id: T | null;
    _nested?: L;
    weight: V;
    min: V;
    max: V;
    step: V;
    group: number;
    transform?: null | ((x: number) => number);
}
export declare type LootTable<T extends string = string, V extends number | string = number> = Array<Partial<ILootTableEntry<T, V>>>;
export declare type LootTableResolver<T extends string = string, // Item Id type
V extends string = string> = (id: V) => LootTable<T> | undefined;
export declare type LootTableResolverAsync<T extends string = string, V extends string = string> = (id: V) => Promise<LootTable<T> | undefined>;
export interface ILootItem<T extends string = string> {
    id: T | null;
    quantity: number;
}
export declare type Loot<T extends string = string> = Array<ILootItem<T>>;
export declare function AddLoot<TID extends string = string>(loot: Loot<TID>, item: ILootItem<TID>): Loot<TID>;
export declare function ParseLootID<T extends string = string>(id: string): {
    id: T | null;
    count: number;
};
export declare function LootTableEntry<T extends string = string>(id: T | null, weight?: number, min?: number, max?: number, step?: number, group?: number): ILootTableEntry;
declare type AtLeast<T, K extends keyof T> = Partial<T> & Pick<T, K>;
export declare function CheckLootTableEntry<T extends string = string>(entry: AtLeast<ILootTableEntry<T, string | number>, "id">): AtLeast<ILootTableEntry<T, string | number>, "id">;
export declare function LootTableSummaryAsync<T extends string = string, // Item Id type
TID extends string = string>(table: LootTable<T>, resolver?: LootTableResolverAsync<T, TID>): Promise<LootTable<T>>;
export declare function LootTableSummary<T extends string = string, // Item Id type
TID extends string = string>(table: LootTable<T>, resolver?: LootTableResolver<T, TID>): LootTable<T>;
export declare function GetLootAsync<T extends string = string, // Item Id type
TID extends string = string>(table: LootTable<T>, count?: number, resolver?: LootTableResolverAsync<T, TID>, depth?: number): Promise<Loot<T>>;
export declare function GetLoot<T extends string = string, // Item Id type
TID extends string = string>(table: LootTable<T>, count?: number, resolver?: LootTableResolver<T, TID>, depth?: number): Loot<T>;
export {};
